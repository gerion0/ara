
namespace os {
namespace fsm {

constexpr const os::scheduler::Task const * const dispatch_table[] = {
	0,
{{{!foreach_subtask_sorted|
   &{{{!subtask_desc}}}, /* {{{!subtask_id}}} */
}}}
};



class SchedulerFSM : public SimpleFSM {
 public:
    enum {
        IDLE = 0,
	};
    SchedulerFSM(SimpleFSM::internal_state_t state) : SimpleFSM(state) {}


	void dispatch(const SimpleFSM::task_t task_id) {
		if (task_id == IDLE) {
			arch::Dispatcher::Idle();
		} else if (task_id >= sizeof(dispatch_table)/sizeof(*dispatch_table)) {
			CALL_HOOK(FaultDetectedHook, LOGIC_ERRORdetected, 0, 0);
		} else {
			arch::Dispatcher::Dispatch(*dispatch_table[task_id]);
		}
	}

	void iret(SimpleFSM::task_t task_id) {
		dispatch(task_id);
	}
};

SchedulerFSM fsm_engine({{{!get:fsm.initial_state}}});

}
}
