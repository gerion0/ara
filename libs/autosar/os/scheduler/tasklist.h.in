// ****************************************************************
// TaskList Implementation
// ****************************************************************

#include "os/scheduler/events-encoded.h"

namespace os { namespace scheduler {

struct TaskListStatic {
	// Effect: (a,x) = max{((a,x), (b,y)} with (a,x) <= (b,y) <=> a <= b
	// subtracts signature B0 from a,x and adds signature sig to catch lost updates
	template<typename CP, typename OP, typename CI, typename OI>
	forceinline void updateMax(B_t& sigPrio, B_t& sigId, const B_t sig,
			CP * const current_prio, const OP & other_prio,
			CI * const current_id, const OI & other_id) const {
		pseudo_static_assert(other_prio.getB() > sigPrio,  "signature of b must be greater than signature of a");
		asm_label("updateMax");

		// unencoded comparison
		bool result;
		result = (current_prio->vc - sigPrio) <= (other_prio.vc - other_prio.getB());

		// encoded check of comparison
		// a>b  => diff = 2^32 - (a.vc - b.vc)
		// a<=b => diff = b.vc - a.vc
		value_coded_t diff = other_prio.vc - current_prio->vc;
		static const volatile A_t ta = CP::A; // prevent  -> *,>>,+ optimization
		value_coded_t sigCond = diff %% ta;
		const value_coded_t sigPos = other_prio.getB() - sigPrio;
		const value_coded_t sigNeg = (CP::MAXMODA + sigPos) %% CP::A;
		pseudo_static_assert(sigPos != sigNeg, "sigPos and sigNeg must differ");

		if(result) {
			current_prio->vc = sigPrio + (other_prio.vc - other_prio.getB()) + sig - sigPos;
			current_id->vc = sigId + other_id.vc + sig - other_id.getB();
		} else {
			current_prio->vc += (sigPos - sigNeg) + (sig - sigPos);
			current_id->vc += (sigPos - sigNeg) + sig;
		}

		// return finished control flow signature
		current_prio->vc += sigCond;
		current_id->vc += sigCond;

		//return sig + sigCond;
		sigPrio += sig;
		sigId += sig + sigPos;
	}

	// Effect: a = max{a, b} with a <= b
	// subtracts signature B0 from a,x and adds signature B1 to catch lost updates
	template<B_t B0, B_t B1, typename T, typename S>
	forceinline value_coded_t updateMax(T& a, const S& b) const {

		// control flow signature
		value_coded_t result;

		// unencoded comparison
		result = ((a.vc - B0) - T::B) <= (b.vc - S::B);

		// encoded check of comparison
		value_coded_t diff = b.vc - (a.vc - B0); // this>t  => diff = 2^m - (vc - t.vc)
												 // this<=t => diff = t.vc - vc
		static const volatile A_t ta = T::A; // prevent %% -> *,>>,+ optimization
		value_coded_t sigCond = diff %% ta;
		const value_coded_t sigPos = S::B - T::B;
		const value_coded_t sigNeg = (T::MAXMODA + sigPos) %% T::A;

		if(result) {
			// a=b with added signature B1
			a.vc = b.vc + (T::B - S::B) + B1;

			// set control flow signature (expected: sigCond == sigPos)
			result += (T::A - 1) + B1;
		} else {
			// remove old B-1, add new B signature to "unmodified" a,x
			a.vc = a.vc - B0 + B1;

			// set control flow signature (expected: sigCond == sigNeg)
			result += (sigPos - sigNeg) + B1;
		}

		// return finished control flow signature
		result += sigCond;
		return result;
	}


	template<typename T, typename S>
	static constexpr value_coded_t updateMax_signature(value_coded_t B1, __attribute__ ((unused)) T& prio, __attribute__ ((unused)) S& task) {
		return (S::B - T::B + B1) %% S::A;
	}

};

struct TaskList : public TaskListStatic {

	typedef uint32_t event_mask_t;

	typedef Encoded_Static<A0, {{{generate:current_prio_sig}}}> current_prio_t;
    typedef Encoded_Static<A0, {{{generate:current_task_sig}}}> current_task_t;

	// encoded task priorities
{{{!foreach_subtask|
	Encoded_Static<A0, {{{!subtask_prio_sig}}}> {{{!subtask}}};
    {{{!foreach_event|\
        Event<3, 7, {{{!prio_offset}}}> {{{!event}}};
    }}}
}}}

	// idle task id/priority
    static constexpr auto scheduler_prio = EC({{{generate:scheduler_prio_sig}}}, {{{!scheduler_prio}}});
	static constexpr auto idle_id   = EC({{{!idle_id_sig}}}, 0);
	static constexpr auto idle_prio = EC({{{!idle_prio_sig}}}, {{{!prio_offset}}});
    static constexpr auto prio_offset = {{{!prio_offset}}};


	TaskList() : TaskListStatic()
    {{{!foreach_subtask| ,
        {{{!subtask}}}({{{!prio_offset}}})\
        {{{!foreach_event|\
           , {{{!event}}}()\
        }}}
	}}}
    { /* empty constructor */ }

	/** Set priority of task id to prio **/
	// returns an encoded 0 with the signature (B) of the modified task - prio.B
	forceinline value_coded_t isReady(const Task::id_t id) {
{{{!foreach_subtask|
            if(id == {{{!subtask_id}}}) {
			    return ({{{!subtask}}}.vc) ^ (EC({{{!subtask_prio_sig}}}, prio_offset).vc);
            } else\
}}}
		{
			assert(false);
			return 0;
		}
	}

	/** Set priority of task id to prio **/
	// returns an encoded 0 with the signature (B) of the modified task - prio.B

	forceinline value_coded_t set(const Task::id_t id, const Task::prio_t prio) {
		auto newprio = EC(1, prio);
		return set(id, newprio);
	}

	template<typename S>
	forceinline value_coded_t set(const Task::id_t id, const S prio) {
{{{!foreach_subtask|
        if(id == {{{!subtask_id}}}) {
	          {{{!subtask}}} = prio + EC(1, prio_offset);
	          return ({{{!subtask}}} - prio).getCodedValue();
        } else \
}}} {
			 assert(false);
			 return 0;
		 }
	}



	/** Set priority of task id to prio **/
	// returns an encoded 0 with the signature (B) of the modified task - prio.B
	forceinline value_coded_t activate(const Task::id_t id, const Task::prio_t newprio_) {
		auto newprio = EC(2, newprio_);
{{{!foreach_subtask|
        if(id == {{{!subtask_id}}}) {
              auto old_prio = {{{!subtask}}};
              if (((old_prio - EC(1, prio_offset)).vc / A0) == 0) {
{{{!foreach_event|
                  {{{!event}}}.clear();
}}}
              }
	          {{{!subtask}}}.vc += 10;
	          updateMax<10, 11>({{{!subtask}}}, newprio + EC(1, prio_offset));
	          {{{!subtask}}}.vc -= 11;
	          value_coded_t ret = ({{{!subtask}}} - newprio).getCodedValue();
	          if (MOD(ret, A0) != (decltype({{{!subtask}}})::B - decltype(newprio)::B)) {
		         CALL_HOOK(FaultDetectedHook, ANBdetected, 0, 0);
	          }
	          return ret;
        } else \
}}} {
			assert(false);
			return 0;
		}
	}

	template<const bool * possible_tasks = nullptr, typename T, typename S>
	forceinline value_coded_t head(T& id, S& prio) const {
		B_t sigId = id.getB();
		B_t sigPrio = prio.getB();

{{{#head_fail_fail:arg0, arg1|\
    CALL_HOOK(FaultDetectedHook, ANBdetected, %(arg0)s, %(arg1)s);\
}}}
{{{#head_fail_retry:arg0, arg1|\
    return 42;
}}}

{{{#head_update_max|\
    {{{!if_comp_idx_eq_zero|
        sigId += 3;
        sigPrio += 3;
        auto {{{!subtask}}}_delta = Event<>::must_wait_p({{{!event_list}}});
        auto {{{!subtask}}}_prio = {{{!subtask}}} - {{{!subtask}}}_delta;
        // kout << "{{{!subtask}}} " << {{{!subtask}}}.vc / A0  << " " << ({{{!subtask}}}_delta.vc / A0) << endl;
        id.vc = Encoded::encode({{{!subtask_id}}}, A0, sigId, 0);
        prio.vc = {{{!subtask}}}_prio.vc + (sigPrio - {{{!subtask}}}_prio.getB());
    }}}\
    {{{!if_comp_idx_gt_zero|
		if (possible_tasks == nullptr || possible_tasks[{{{!subtask_id}}}]) {
			// {{{!subtask}}} >= prio?
			auto {{{!subtask}}}_delta = Event<>::must_wait_p({{{!event_list}}});
			auto {{{!subtask}}}_prio = {{{!subtask}}} - {{{!subtask}}}_delta;
			//         kout << "{{{!subtask}}} " << {{{!subtask}}}.vc / A0  << " " << ({{{!subtask}}}_delta.vc / A0) << endl;
			updateMax(sigPrio, sigId, 3, &prio, {{{!subtask}}}_prio, &id, EC({{{!subtask_id_sig}}}, {{{!subtask_id}}}));
			if (MOD((prio.vc + id.vc), A0) != (sigPrio + sigId)) {
				{{{!head_fail:prio.vc,id.vc}}}
			}

			/* Recode if sigID got too big */
			if (sigId > A0 / 2) {
				id.vc = id.vc - sigId + 3;
				sigId = 3;
			}
		}
    }}}\
}}}
{{{generate:head_update_max_cascade}}}

{{{!if_comp_idx_eq_zero|
        id = idle_id;
        prio = idle_prio;
}}}
{{{!if_comp_idx_gt_zero|
		// restore idle_id if idle_id >= prio
		updateMax(sigPrio, sigId, 3, &prio, idle_prio, &id, idle_id);
		// last comparison, needs no assert
}}}

		pseudo_static_assert(sigId > 0, "constant sigId not optimized away completely");
		pseudo_static_assert(sigPrio > 0, "constant sigPrio not optimized away completely");

		id.vc -= (sigId - id.getB());
		prio.vc -= (sigPrio - prio.getB());

        // Undo prio offset
        prio =  prio - EC(1, prio_offset);

		return 0;
	}

	forceinline value_coded_t remove(const Task::id_t id) {
		// The signature here is arbitrary, and won't be exposed.
		return set(id, EC(3, 0));
	}

    /** Wait for a specific event mask **/
    forceinline void wait_events(const Task::id_t id, const event_mask_t mask) {
        (void) id;
        (void) mask;
{{{!foreach_subtask|\
        if (id == {{{!subtask_id}}}) {
{{{!foreach_event|
            if (mask & {{{!event_mask}}}) {{{!event}}}.wait();
            else {{{!event}}}.unwait();
}}}
{{{!if_not_preemptable|
            // Release the RES_SCHEDULER resource, if we have to block.
            // For this we compute the blocking term, and invert it, with -
            auto blocking_term = EC(4, prio_offset) - Event<1>::must_wait_p({{{!event_list}}});
            // blocking_term = (BLOCK, 0) :: (No blocking condition, blocking condition)

            // We calculate a priority, that is higher than the static priority of the waiting task. It
            // is exactly that amout higher, BLOCK is higher than RES_SCHEDULER
            constexpr auto S_prio_ = EC(1, {{{!subtask_desc}}}.prio + {{{!prio_offset}}} - {{{!scheduler_prio}}});
            // S_prio_ = (S', S')

            // We do an update max with S_prio_
            blocking_term.vc += 10;
            updateMax<10, 11>(blocking_term, S_prio_);
            blocking_term.vc -= 11;
            // Check the update Max
            value_coded_t ret = (blocking_term - S_prio_).vc;
	        if (MOD(ret, A0) != (decltype(blocking_term)::B - decltype(S_prio_)::B)) {
               CALL_HOOK(FaultDetectedHook, ANBdetected, 0, 0);
	        }
            // blocking_term = (BLOCK, S')

            // Remove the delta between BLOCK and RES_SCHEDULER
            constexpr auto delta = EC(1, {{{!prio_offset}}} - {{{!scheduler_prio}}});
            auto newprio = blocking_term - delta;
            // newprio = (RES_SCHEDULER, Static Priority of Task)

            newprio.check();

            // Set with priority offset
            {{{!subtask}}} = EC(1, prio_offset) + newprio;
}}}

        } else \
}}}     {
			assert(false);
		}
    }

    /** Set Events **/
    forceinline void set_events(const Task::id_t id, const event_mask_t mask) {
        (void) id;
        (void) mask;
{{{!foreach_subtask|\
        if (id == {{{!subtask_id}}}) {
{{{!foreach_event|
            if (mask & {{{!event_mask}}}) {{{!event}}}.set();
}}}
        } else \
}}}       {
			assert(false);
		}
    }

    /** Clear Events **/
    forceinline void clear_events(const Task::id_t id, const event_mask_t mask) {
        (void) id;
        (void) mask;
{{{!foreach_subtask|\
        if (id == {{{!subtask_id}}}) {
{{{!foreach_event|
            if (mask & {{{!event_mask}}}) {{{!event}}}.clear();
}}}
        } else \
}}}
        {
		}
    }

    /** Get Events **/
    forceinline event_mask_t get_events(const Task::id_t id) {
        (void) id;
        event_mask_t ret = 0;
{{{!foreach_subtask|\
        if (id == {{{!subtask_id}}}) {
{{{!foreach_event|
            if ({{{!event}}}.get()) ret |= {{{!event_mask}}};
            {{{!event}}}.check();
}}}
        } else \
}}}       {
          }
       return ret;
    }

	template<typename T>
	static Task::id_t decode_task_id(T id){
		return id.decode();
	}

	static auto encode_task_id(Task::id_t id) -> decltype(EC(1,1)) {
		return EC(1, id);
	}

	static auto encode_task_prio(Task::id_t id) -> decltype(EC(1,1)) {
		return EC(1, id);
	}


};

/** Equality operator (used for TMR) [enc=1] **/
bool operator==(const TaskList& lhs, const TaskList& rhs) {
{{{!foreach_subtask|
    if(lhs.{{{!subtask}}}.vc != rhs.{{{!subtask}}}.vc) return false;
	{{{!foreach_event|
	if(!(lhs.{{{!event}}} == rhs.{{{!event}}})) return false;
    }}}
}}}
    return true;
}

bool operator!=(const TaskList& lhs, const TaskList& rhs) { return !(lhs == rhs); }


constexpr Encoded_Static<A0, {{{generate:idle_id_sig}}}> TaskList::idle_id;
constexpr Encoded_Static<A0, {{{generate:idle_prio_sig}}}> TaskList::idle_prio;
constexpr Encoded_Static<A0, {{{generate:scheduler_prio_sig}}}> TaskList::scheduler_prio;
constexpr decltype(TaskList::prio_offset) TaskList::prio_offset;


}; // scheduler
}; // os
